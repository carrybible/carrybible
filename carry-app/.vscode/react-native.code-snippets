{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    "scope": "javascript",
    "prefix": ["log", "cons"],
    "body": ["console.log('$1')", ""],
    "description": "Log output to console"
  },
  "Functional component": {
    "scope": "javascript",
    "prefix": "fnc",
    "body": [
      "/**",
      "* $1",
      "*",
      "* @format",
      "* @flow",
      "*/",
      "",
      "import React from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "",
      "type IProps = {",
      "}",
      "",
      "const $2 = (props: IProps) => {",
      "\treturn (",
      "\t\t<View/>",
      "\t)",
      "}",
      "",
      "$2.defaultProps = {}",
      "",
      "const s = StyleSheet.create({})",
      "",
      "export default $2"
    ],
    "description": "Create functional component"
  },
  "Typescript Functional component": {
    "scope": "typescript, typescriptreact",
    "prefix": "tfnc",
    "body": [
      "/**",
      "* $1",
      "*",
      "* @format",
      "*",
      "*/",
      "",
      "import React from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "",
      "interface Props {",
      "}",
      "",
      "const $2:React.FC<Props> = (props) => {",
      "\treturn (",
      "\t\t<View/>",
      "\t)",
      "}",
      "",
      "$2.defaultProps = {}",
      "",
      "const s = StyleSheet.create({})",
      "",
      "export default $2"
    ],
    "description": "Create type functional component"
  },
  "Modalize component": {
    "scope": "typescript, typescriptreact",
    "prefix": "mdl",
    "body": [
      "/**",
      " * $1",
      " *",
      " * @format",
      " * @flow",
      " */",
      "",
      "import React, { useEffect, useRef, useContext } from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "import Modalize from '@carrybible/react-native-modalize'",
      "import { Navigator, Metrics } from '../../shared'",
      "import { ThemeContext } from '../../shared/Theme'",
      "",
      "type IProps = {",
      "  onClosed?: () => void,",
      "}",
      "",
      "const $2 = (props: IProps) => {",
      "  const modal = useRef(null)",
      "  const { theme } = useContext(ThemeContext)",
      "",
      "  useEffect(() => {",
      "    openModal()",
      "    return () => {",
      "      modal.current = undefined",
      "    }",
      "  }, [])",
      "",
      "  const onClosed = () => {",
      "    if (props.onClosed) {",
      "      props.onClosed()",
      "    }",
      "    Navigator.back()",
      "  }",
      "",
      "  const openModal = () => {",
      "    if (modal.current) {",
      "      modal.current.open()",
      "    }",
      "  }",
      "",
      "  const closeModal = () => {",
      "    if (modal.current) {",
      "      modal.current.close()",
      "    }",
      "  }",
      "",
      "  return (",
      "    <Modalize",
      "      ref={modal}",
      "      onClosed={onClosed}",
      "      adjustToContentHeight",
      "      modalStyle={{ ...s.container, backgroundColor: theme.background }}",
      "      withHandle={false}",
      "    >",
      "      <View />",
      "    </Modalize>",
      "  )",
      "}",
      "",
      "$2.defaultProps = {}",
      "",
      "const s = StyleSheet.create({",
      "  container: {",
      "    height: 480,",
      "    borderTopLeftRadius: 20,",
      "    borderTopRightRadius: 20,",
      "  },",
      "})",
      "",
      "export default $2",
      ""
    ],
    "description": "Modalize component"
  }
}
